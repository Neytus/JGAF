<?xml version="1.0" encoding="UTF-8"?>
<procedures>
  <procedure type="T">
    <classPath>jgaf.procedure.FAtoRegularGrammar</classPath>
    <name>FA to Regular grammar</name>
    <description>Transforation of the finite-state automaton to regular grammar.</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>FA without epilon steps.</description>		
      </input>
    </inputs>		
    <output>
      <id>G</id>
      <description>Output grammar</description>
    </output>
  </procedure>
  
  <procedure type="S">
    <classPath>jgaf.automaton.fa.simulation.DFASimulation</classPath>
    <name>DFA Simulation</name>
    <description>Simulation of the deterministic finite-state automaton.</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>DFA</description>		
      </input>
    </inputs>
    <parameters>
      <parameter>
	<description>Input word</description>
      </parameter>
    </parameters>    
  </procedure>





  <procedure type="S">
    <classPath>jgaf.automaton.pda.simulation.PDASimulation</classPath>
    <name>PDA Simulation</name>
    <description>Simulation of the push-down automaton.</description>
    <inputs>
      <input>
	<id>PDA</id>
	<description>PDA</description>		
      </input>
    </inputs>   
  </procedure>




  <procedure type="A">
    <classPath>jgaf.procedure.DFAEquality</classPath>
    <name>DFA Equality</name>
    <description>Deterministic Finite-state automaton equality checker.</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>First DFA</description>		
      </input>
      <input>
	<id>FA</id>
	<description>Second DFA</description>		
      </input>      
    </inputs>		
  </procedure>

  <procedure type="T">
    <classPath>jgaf.procedure.EpsilonStepsElimination</classPath>
    <name>Epsilon steps elimination</name>
    <description>Converting of Finite-state automaton with epsilon steps to equivalent Finite-state automaton without epsilon steps.</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>FA with epsilon steps.</description>		
      </input>
    </inputs>		
    <output>
      <id>FA</id>
      <description>Fa without epsilon steps.</description>
    </output>
  </procedure>
  
  <procedure type="T">
    <classPath>jgaf.procedure.AutomatonMinimization</classPath>
    <name>Minimalize automaton </name>
    <description>Minimalize finite automat</description>
    <inputs>
      <input>
      	<id>FA</id>
      	<description>DFA without unreachable with total transition function</description>		
      </input>
    </inputs>		
    <output>
      <id>FA</id>
      <description>Minimal finite automaton</description>		
    </output>
  </procedure> 

  <procedure type="T">
    <classPath>jgaf.procedure.RegularGrammarToFA</classPath>
    <name>Regular Grammar to FA</name>
    <description>Transformation of the regular grammar to finite-state automaton.</description>
    <inputs>
      <input>
	<id>G</id>
	<description>Regular grammar.</description>		
      </input>
    </inputs>		
    <output>
      <id>FA</id>
      <description>Finite-state automaton.</description>
    </output>
  </procedure>
  
  
  <procedure type="T">
    <classPath>jgaf.procedure.InaccessibleStatesElimination</classPath>
    <name>Inaccessible states Elimination</name>
    <description>Remove inaccessible states of finite-state automaton</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>Finite-state automaton</description>		
      </input>
    </inputs>		
    <output>
      <id>FA</id>
      <description>Finite-state automaton without inaccessible states</description>
    </output>
  </procedure>



  <procedure type="T">
    <classPath>jgaf.procedure.NFAtoDFA</classPath>
    <name>NFA to DFA</name>
    <description>Transforation of the nondeterministic finite-state automaton to deterministic finite-state automaton.</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>Nondeterministic finite-state automaton</description>		
      </input>
    </inputs>		
    <output>
      <id>FA</id>
      <description>Deterministic finite-state automaton</description>		
    </output>
  </procedure>

  <procedure type="T">
    <classPath>jgaf.procedure.AutomataComposition</classPath>
    <name>Parallel synchronous composition</name>
    <description>Parallel synchronous composition of two total deterministic finite-state automata.</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>First deterministic finite-state automaton</description>		
      </input>
      <input>
	<id>FA</id>
	<description>Second deterministic finite-state automaton</description>		
      </input>      
    </inputs>
    <parameters> -
         <parameter>
             <description>Composition type:</description>
             <poptions>
                 <poption>UNION</poption>                             			 <poption>INTERSECTION</poption>
                 <poption>DIFFERENCE</poption>
             </poptions>
         </parameter>
    </parameters>  		
    <output>
      <id>FA</id>
      <description>First deterministic finite-state automaton</description>		
    </output>
  </procedure>

    <procedure type="A"> 
        <classPath>jgaf.lrextension.procedures.FiFoProcedure</classPath> 
        <name>First &amp; Follow</name> 
        <description>Calculation FIRST and FOLLOW for CFG (with possible epsilon steps)</description> -
        <inputs> -
            <input> 
                <id>G</id> 
                <description>Any context-free grammar.</description> 
            </input> 
        </inputs> -
        <parameters> -
            <parameter> 
                <description>k=</description> 
                <poptions>-
                    <poption>1</poption>
                    <poption>2</poption>
                    <poption>3</poption>
                </poptions>
            </parameter> 
        </parameters> 
    </procedure> 
    
     <procedure type="A"> 
        <classPath>jgaf.lrextension.procedures.LRParserProcedure</classPath> 
        <name>LR Parsing</name> 
        <description>Generation and simulation of LR(k), LALR(k)  or SLR(k) parser for CFG (with possible epsilon steps). </description> -
        <inputs> -
            <input> 
                <id>G</id> 
                <description>Any context-free grammar (with possible epsilon steps).</description> 
            </input> 
        </inputs> -
        <parameters> -
            <parameter> 
                <description>Parser type:</description> 
                <poptions>-
                    <poption>LR</poption>
                    <poption>SLR</poption>
                    <poption>LALR</poption>
                </poptions>
            </parameter>
            <parameter> 
                <description>k=</description> 
                <poptions>-
                    <poption>0</poption>
                    <poption>1</poption>
                    <poption>2</poption>
                    <poption>3</poption>               
                </poptions>
            </parameter> 
        </parameters> 
    </procedure>  
  
    <procedure type="T">
    <classPath>jgaf.procedure.EliminateUnreachableSymbols</classPath>
    <name>Eliminate unreachable symbols</name>
    <description>Elimination of unreachable symbols in Grammar</description>
    <inputs>
      <input>
      	<id>G</id>
      	<description>Context free grammar</description>		
      </input>
    </inputs>		
    <output>
      <id>G</id>
      <description>CFG without unreachable symbols</description>		
    </output>
    <parameters>
      <parameter>
	        <description>Set nonterminal</description>
      </parameter>
    </parameters> 
  </procedure> 
  
  <procedure type="A">
    <classPath>jgaf.procedure.IsLanguageNotEmpty</classPath>
    <name>Is language not empty?</name>
    <description>Check if language is not empty</description>
    <inputs>
      <input>
      	<id>G</id>
      	<description>Context free grammar</description>		
      </input>
    </inputs>		
    <output>
      <id>G</id>
      <description>CFG without non-generating productions</description>		
    </output>
    <parameters>
      <parameter>
	        <description>Set nonterminal</description>
      </parameter>
    </parameters> 
  </procedure> 
  
    <procedure type="T">
    <classPath>jgaf.procedure.EliminateUselessSymbols</classPath>
    <name>Eliminate useless symbols</name>
    <description>Elimination of useless symbols in Grammar</description>
    <inputs>
      <input>
      	<id>G</id>
      	<description>Context free grammar</description>		
      </input>
    </inputs>		
    <output>
      <id>G</id>
      <description>CFG without useless symbols</description>		
    </output>
    <parameters>
      <parameter>
	        <description>Order (classic/unusual)</description>
      </parameter>
    </parameters> 
  </procedure>  
  
  <procedure type="T">
    <classPath>jgaf.procedure.EliminateEpsilonProductions</classPath>
    <name>Eliminate epsilon productions </name>
    <description>Elimination of epsilon productions</description>
    <inputs>
      <input>
      	<id>G</id>
      	<description>Context free grammar</description>		
      </input>
    </inputs>		
    <output>
      <id>G</id>
      <description>CFG without epsilon productions</description>		
    </output>
    <parameters>
      <parameter>
	        <description>Set nonterminal</description>
      </parameter>
    </parameters> 
  </procedure> 
  
  <procedure type="T">
    <classPath>jgaf.procedure.EliminateUnitRules</classPath>
    <name>Eliminate unit rules </name>
    <description>Elimination of unit rules</description>
    <inputs>
      <input>
      	<id>G</id>
      	<description>Context free grammar</description>		
      </input>
    </inputs>		
    <output>
      <id>G</id>
      <description>CFG without unit rules</description>		
    </output>
    <parameters>
      <parameter>
	        <description>Set nonterminal</description>
      </parameter>
    </parameters> 
  </procedure> 
  
  <procedure type="T">
  <classPath>jgaf.procedure.EliminateDirectLeftRecursion</classPath>
    <name>Eliminate direct left recursion</name>
    <description>Elimination of direct left recursion</description>
    <inputs>
      <input>
      	<id>G</id>
      	<description>CFG</description>		
      </input>
    </inputs>		
    <output>
      <id>G</id>
      <description>CFG</description>		
    </output>
    <parameters>
      <parameter>
	        <description>Set nonterminal or def</description>
      </parameter>
      <parameter>
	        <description>Type</description>
      </parameter>
    </parameters>
  </procedure>  
  
  <procedure type="T">
    <classPath>jgaf.procedure.EliminateLeftRecursion</classPath>
    <name>Eliminate left recursion</name>
    <description>Elimination of left recursion</description>
    <inputs>
      <input>
      	<id>G</id>
      	<description>CFG</description>		
      </input>
    </inputs>		
    <output>
      <id>G</id>
      <description>CFG</description>		
    </output>
    <parameters>
      <parameter>
	        <description>Set nonterminal or def</description>
      </parameter>
      <parameter>
	        <description>Type</description>
      </parameter>
      <parameter>
	        <description>Ordering</description>
      </parameter>
    </parameters>
  </procedure>  
  
  <procedure type="T">
    <classPath>jgaf.procedure.TransformToCNF</classPath>
    <name>Transform to CNF </name>
    <description>Transform CFG to CFG in Chomsky normal form</description>
    <inputs>
      <input>
      	<id>G</id>
      	<description>Context free grammar without unit rules, without epsion rules and without unuseable rules</description>		
      </input>
    </inputs>		
    <output>
      <id>G</id>
      <description>CFG in Chomsky normal form</description>		
    </output>
    <parameters>
      <parameter>
	        <description>Set nonterminal</description>
      </parameter>
      <parameter>
	        <description>Rules symbols</description>
      </parameter>
      <parameter>
	        <description>Term symbols</description>
      </parameter>
    </parameters>
  </procedure>
  
  <procedure type="T">
    <classPath>jgaf.procedure.TransformToGNF</classPath>
    <name>Transform to GNF </name>
    <description>Transform CFG to CFG in Greibach normal form</description>
    <inputs>
      <input>
      	<id>G</id>
      	<description>CFG without unit, epsilon and useless productions</description>		
      </input>
    </inputs>		
    <output>
      <id>G</id>
      <description>CFG in Greibach normal form</description>		
    </output>
    <parameters>
      <parameter>
	        <description>Set nonterminal</description>
      </parameter>
      <parameter>
	        <description>Rules symbols</description>
      </parameter>
      <parameter>
	        <description>Ordered list</description>
      </parameter>
    </parameters>
  </procedure>
  
  
  
  <procedure type="T">
    <classPath>jgaf.procedure.REtoFA</classPath>
    <name>RE to FA </name>
    <description>Transform Regular Expression to Finite Automaton</description>
    <inputs>
      <input>
      	<id>RE</id>
      	<description>Regular expression</description>		
      </input>
    </inputs>		
    <output>
      <id>FA</id>
      <description>Finite Automaton</description>		
    </output>
    <parameters>
      <parameter>
	        <description>Running</description>
      </parameter>
    </parameters>
  </procedure>  
  
  <procedure type="T">
    <classPath>jgaf.procedure.FAtoRE</classPath>
    <name>FA to RE </name>
    <description>Transform Finite Automaton to Regular Expression</description>
    <inputs>
      <input>
      	<id>FA</id>
      	<description>Finite Automaton</description>		
      </input>
    </inputs>		
    <output>
      <id>RE</id>
      <description>Regular expression</description>		
    </output>
    <parameters>
      <parameter>
	        <description>Running</description>
      </parameter>
    </parameters>
  </procedure> 
</procedures>


