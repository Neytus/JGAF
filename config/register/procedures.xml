<?xml version="1.0" encoding="UTF-8"?>
<procedures>
  <procedure type="T">
    <classPath>jgaf.procedure.FAtoRegularGrammar</classPath>
    <name>FA to Regular grammar</name>
    <description>Transforation of the finite-state automaton to regular grammar.</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>FA without epilon steps.</description>		
      </input>
    </inputs>		
    <output>
      <id>G</id>
      <description>Output grammar</description>
    </output>
  </procedure>
  <procedure type="S">
    <classPath>jgaf.automaton.fa.simulation.DFASimulation</classPath>
    <name>DFA Simulation</name>
    <description>Simulation of the deterministic finite-state automaton.</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>DFA</description>		
      </input>
    </inputs>
    <parameters>
      <parameter>
	<description>Input word</description>
      </parameter>
    </parameters>    
  </procedure>
  <procedure type="S">
    <classPath>jgaf.automaton.pda.simulation.PDASimulation</classPath>
    <name>PDA Simulation</name>
    <description>Simulation of the push-down automaton.</description>
    <inputs>
      <input>
	<id>PDA</id>
	<description>PDA</description>		
      </input>
    </inputs>   
  </procedure>
  <procedure type="A">
    <classPath>jgaf.procedure.DFAEquality</classPath>
    <name>DFA Equality</name>
    <description>Deterministic Finite-state automaton equality checker.</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>First DFA</description>		
      </input>
      <input>
	<id>FA</id>
	<description>Second DFA</description>		
      </input>      
    </inputs>		
  </procedure>
  <procedure type="T">
    <classPath>jgaf.procedure.EpsilonStepsElimination</classPath>
    <name>Epsilon steps elimination</name>
    <description>Converting of Finite-state automaton with epsilon steps to equivalent Finite-state automaton without epsilon steps.</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>FA with epsilon steps.</description>		
      </input>
    </inputs>		
    <output>
      <id>FA</id>
      <description>Fa without epsilon steps.</description>
    </output>
  </procedure>
  <procedure type="T">
    <classPath>jgaf.procedure.RegularGrammarToFA</classPath>
    <name>Regular Grammar to FA</name>
    <description>Transforation of the regular grammar to finite-state automaton.</description>
    <inputs>
      <input>
	<id>G</id>
	<description>Regular grammar.</description>		
      </input>
    </inputs>		
    <output>
      <id>FA</id>
      <description>Finite-state automaton.</description>
    </output>
  </procedure>
  <procedure type="T">
    <classPath>jgaf.procedure.InaccessibleStatesElimination</classPath>
    <name>Inaccessible states Elimination</name>
    <description>Remove inaccessible states of finite-state automaton</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>Finite-state automaton</description>		
      </input>
    </inputs>		
    <output>
      <id>FA</id>
      <description>Finite-state automaton without inaccessible states</description>
    </output>
  </procedure>
  <procedure type="T">
    <classPath>jgaf.procedure.NFAtoDFA</classPath>
    <name>NFA to DFA</name>
    <description>Transforation of the nondeterministic finite-state automaton to deterministic finite-state automaton.</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>Nondeterministic finite-state automaton</description>		
      </input>
    </inputs>		
    <output>
      <id>FA</id>
      <description>Deterministic finite-state automaton</description>		
    </output>
  </procedure>
  <procedure type="T">
    <classPath>jgaf.procedure.AutomataComposition</classPath>
    <name>Parallel asynchronous composition</name>
    <description>Parallel asynchronous composition of two deterministic finite-state automata.</description>
    <inputs>
      <input>
	<id>FA</id>
	<description>First deterministic finite-state automaton</description>		
      </input>
      <input>
	<id>FA</id>
	<description>Second deterministic finite-state automaton</description>		
      </input>      
    </inputs>		
    <output>
      <id>FA</id>
      <description>First deterministic finite-state automaton</description>		
    </output>
  </procedure>  
  
</procedures>


